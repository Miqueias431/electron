Tutorial electron

1) Iniciar um novo projeto node
    npm init

(seguir a documentação)
<=======================================================================================>
2) Criar uma estrutura de pastas 
utilizando um MVC (modelo de camadas)
src
|---- views
        |--- index.html
|---- public
        |--- css
        |--- img
        |--- js
<=======================================================================================>
3) personalização da janela
    - dimenções
    - redimensionamento
    - cor
    - ícone
    - menu e barra de titulo
<=======================================================================================>
4) Personalização do menu
template -> estrutura de dados
Passo 1: importar o recurso Menu e criar o template
Passo 2: exibir o template no lugar do menu original

Obs: algins recursos precisam ser importados:
Exemplo: Acesso a links externos
shell

Obs2: O shell é utilizado no main para acessar recursos externos
(links)
<=======================================================================================>
5) processos (principal de renderização)
    - Só pode existir um processo principal (main.js)
    - Para criar um processo de renderização devemos ligar um documento js na página html
    - Podemos usar um único processo de renderização para todas as páginas html, porém é 
    recomendado usar processo de renderização por documento html
    - por uma questão didatica podemos dizer que o processo de renderização é o front-end
    da aplicação e o principal é back-end da aplicação
------------------------------------------------------------------------------------------
    preload.js (seguir a documentação para implementar)
    O preload.js é usado para:
    1) Expor a utilização do node e recursos de electron
    para o processo de renderização, melhorando o desempenho
    e a segurança
    2) Para situações onde você sabe que vai precisar de certos
    recursos e dados antes que o usuário solicite diretamente,
    tornando a experiência do usuário mais rápida e suave

    Obs: É posspível tirar o contexto de isolamento e permitir
    a execução do node.js no processo de renderização.
------------------------------------------------------------------------------------------
    IPC (inter-process communication)
    ipcMain (processo principal)
    ipcRenderer (processo de renderização)
    
    sintaxe do ipcMain e do ipcRenderer (recebimento)
    on()
    ipcMain.on(() => {})
    ipcRenderer.on(() => {})

                      preload.js 
                          |
    Fluxo: ipcRenderer -> hello() ->  main.js (ipcMain)

_______________________________________________________
    Uso de frameworks (front-end) no electron
- bootstrap
     |____ local (download)

Passo 1: Fazer o download do css e js compilado
Passo 2: Descompactar e copiar o bootstrap.min.css e bootstrap.min.js para a pasta public
Passo 3: Link com o documento html

Para usar o bootstrap seguir a documentação:
Dica: 
O bootstrap trabalha com conceitos de classes
Inicie criando um container (div.container)

_______________________________________________________
Relação entre janelas (parent-child) e modal
- Foco do usuário no sistema
- Segurança e desempenho

Passo 1: Determinar a janela pai (principal)
Passo 2: Criar o relacionamento entres as janelas